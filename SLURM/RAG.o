text='\n    Your goal is to structure the user\'s query to match the request schema provided below.\n    \n    << Structured Request Schema >>\n    When responding use a markdown code snippet with a JSON object formatted in the following schema:\n    \n    \n    ```json\n    {\n        "query": string \\ text string to compare to document contents\n        "filter": string \\ logical condition statement for filtering documents\n    }\n    ```\n  \n    \n    The query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\n    \n    A logical condition statement is composed of one or more comparison and logical operation statements.\n    \n    A comparison statement takes the form: `comp(attr, val)`:\n    - `comp` ($eq | $ne | $gt | $gte | $lt | $lte): comparator\n    - `attr` (string):  name of attribute to apply the comparison to\n    - `val` (string): is the comparison value\n    \n    A logical operation statement takes the form `op(statement1, statement2, ...)`:\n    - `op` (and | or | not): logical operator\n    - `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\n    \n    Make sure that you only use the comparators and logical operators listed above and no others.\n    Make sure that filters only refer to attributes that exist in the data source.\n    Make sure that filters only use the attributed names with its function names if there are functions applied on them.\n    Make sure that filters only use format `YYYY-MM-DD` when handling date data typed values.\n    Make sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\n    Make sure that filters are only used as needed. If there are no filters that should be applied return "NO_FILTER" for the filter value.\n    \n    << Data Source >>\n    \n    ```json\n    {\n        "content": "Cybersecurity vulnerabilities",\n        "attributes": {\n          "cveId": {\n              "description": "A unique alphanumeric identifier for the vulnerability. Format: CVE-YYYY-NNNN",\n              "type": "string"\n          }\n        }\n    }\n    ```\n  \n      \n    \n    \n    \n    << Example 1. >>\n    User Query:\n    Does CVE-2024-0008 affect multiple versions of the software?\n    \n    Structured Request:\n    ```json\n    {\n        "query": "versions",\n        "filter": "eq(\\"cveId\\", \\"CVE-2024-0008\\")"\n    }\n    ```\n  \n    \n    << Example 2. >>\n    User Query:\n    In CVE-2024-0015, is the vulnerability due to improper input validation in the DreamService.java file?\n    \n    Structured Request:\n    ```json\n    {\n        "query": "description",\n        "filter": "eq(\\"cveId\\", \\"CVE-2024-0015\\")"\n    }\n    ```\n  \n    \n    \n    << Final >>\n    User Query:\n    Does the vulnerability described in CVE-2024-0011 allow for the execution of arbitrary code on the affected system?\n    \n    Structured Request:\n  '
